#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import json
import uuid
import urllib.request
import urllib.error
import http.client
import io
import codecs
import os.path

from crashdump.xmlreport import XMLReport

class MultipartFormdataEncoder(object):
    def __init__(self):
        self.boundary = uuid.uuid4().hex
        self.content_type = 'multipart/form-data; boundary={}'.format(self.boundary)

    @classmethod
    def u(cls, s):
        if sys.hexversion < 0x03000000 and isinstance(s, str):
            s = s.decode('utf-8')
        if sys.hexversion >= 0x03000000 and isinstance(s, bytes):
            s = s.decode('utf-8')
        return s

    def iter(self, fields, files):
        """
        fields is a sequence of (name, value) elements for regular form fields.
        files is a sequence of (name, filename, file-type) elements for data to be uploaded as files
        Yield body's chunk as bytes
        """
        encoder = codecs.getencoder('utf-8')
        for (key, value) in fields:
            key = self.u(key)
            yield encoder('--{}\r\n'.format(self.boundary))
            yield encoder(self.u('Content-Disposition: form-data; name="{}"\r\n').format(key))
            yield encoder('\r\n')
            if isinstance(value, int) or isinstance(value, float):
                value = str(value)
            if value is not None:
                yield encoder(self.u(value))
            else:
                yield encoder('')
            yield encoder('\r\n')
        for (key, filename, fpath) in files:
            key = self.u(key)
            filename = self.u(filename)
            yield encoder('--{}\r\n'.format(self.boundary))
            yield encoder(self.u('Content-Disposition: form-data; name="{}"; filename="{}"\r\n').format(key, filename))
            yield encoder('Content-Type: {}\r\n'.format('application/octet-stream'))
            yield encoder('\r\n')
            with open(fpath,'rb') as fd:
                buff = fd.read()
                yield (buff, len(buff))
            yield encoder('\r\n')
        yield encoder('--{}--\r\n'.format(self.boundary))

    def encode(self, fields, files):
        body = io.BytesIO()
        for chunk, chunk_len in self.iter(fields, files):
            body.write(chunk)
        return self.content_type, body.getvalue()

class import_crashes_app(object):
    def __init__(self):
        self._verbose = False
        self._files = []
        self._crashdump_exts = ['.dmp']
        self._upload_url = None
        self._user_agent = 'terra3d-crashuploader/1.0'

    def _add_file(self, f):
        fabs = os.path.abspath(f)

        if os.path.isdir(fabs):
            for e in os.listdir(path=fabs):
                full = os.path.join(fabs, e)
                self._add_file(full)
        else:
            path, name = os.path.split(fabs)
            (basename, ext) = os.path.splitext(name)
            #print('got %s' % fabs)
            try:
                crash_id = uuid.UUID(basename)
            except ValueError:
                crash_id = None
            if crash_id is not None and crash_id.int != 0 and ext in self._crashdump_exts:
                self._files.append(fabs)

    def _process_file(self, f, force=False):

        f_xml = f + '.xml'

        crash_id = None
        crashtimestamp = 0
        reporttimestamp = 0
        productname = ''
        productcodename = ''
        productversion = ''
        producttargetversion = ''
        uploadhostname = ''
        uploadusername = ''
        crashhostname = ''
        crashusername = ''
        buildtype = ''
        buildpostfix = ''
        machinetype = ''
        systemname = ''
        osversion = ''
        osrelease = ''
        osmachine = ''
        applicationfile = ''
        applicationname = ''

        files = [ ('minidump', os.path.basename(f), f) ]
        if os.path.isfile(f_xml):
            files += [ ('minidumpreportxml', os.path.basename(f_xml), f_xml) ]

            xmlreport = XMLReport(f_xml)
            if xmlreport.crash_info is not None:
                crash_id = xmlreport.crash_info.uuid
                applicationfile = xmlreport.crash_info.application
                applicationname = os.path.basename(applicationfile)
                crashtimestamp = xmlreport.crash_info.crash_timestamp
                reporttimestamp = xmlreport.crash_info.report_time
                uploadhostname = xmlreport.crash_info.report_fqdn
                uploadusername = xmlreport.crash_info.report_username
            if xmlreport.fast_protect_version_info is not None:
                productname = xmlreport.fast_protect_version_info.product_name
                productcodename = xmlreport.fast_protect_version_info.product_code_name
                productversion = xmlreport.fast_protect_version_info.product_version
                producttargetversion = xmlreport.fast_protect_version_info.product_target_version
                buildtype = xmlreport.fast_protect_version_info.product_build_type
                buildpostfix = xmlreport.fast_protect_version_info.product_build_postfix
            if xmlreport.fast_protect_system_info is not None:
                machinetype = xmlreport.fast_protect_system_info.machine_type
                crashfqdn = xmlreport.fast_protect_system_info.fqdn
                if not crashfqdn:
                    crashfqdn = xmlreport.fast_protect_system_info.hostname
                crashusername = xmlreport.fast_protect_system_info.username
            if xmlreport.system_info is not None:
                systemname = xmlreport.system_info.platform_type
                osversion = xmlreport.system_info.os_version
                osrelease = xmlreport.system_info.os_version
        else:
            xmlreport = None

        if crash_id is None:
            path, name = os.path.split(f)
            (basename, ext) = os.path.splitext(name)
            try:
                crash_id = uuid.UUID(basename)
            except ValueError:
                crash_id = None

        fields = []
        fields += [ ('id', str(crash_id)) ]
        fields += [ ('ticket', self._create_ticket) ]
        fields += [ ('crashtimestamp', crashtimestamp.isoformat()) ]
        fields += [ ('reporttimestamp', reporttimestamp.isoformat()) ]
        fields += [ ('productname', productname) ]
        fields += [ ('productcodename', productcodename) ]
        fields += [ ('productversion', productversion) ]
        fields += [ ('producttargetversion', producttargetversion) ]
        fields += [ ('fqdn', uploadhostname) ]
        fields += [ ('username', uploadusername) ]
        fields += [ ('crashfqdn', crashfqdn) ]
        fields += [ ('crashusername', crashusername) ]
        fields += [ ('buildtype', buildtype) ]
        fields += [ ('buildpostfix', buildpostfix) ]
        fields += [ ('machinetype', machinetype) ]
        fields += [ ('systemname', systemname) ]
        fields += [ ('osversion', osversion) ]
        fields += [ ('osrelease', osrelease) ]
        fields += [ ('osmachine', osmachine) ]
        fields += [ ('applicationfile', applicationfile) ]
        fields += [ ('applicationname', applicationname) ]
        fields += [ ('force',  'true' if self._force else 'false') ]


        content_type, body = MultipartFormdataEncoder().encode(fields, files)
        headers = {
            'User-Agent': self._user_agent,
            'Content-Type': content_type
        }
        if self._verbose:
            print('url %s' % self._upload_url)
        req = urllib.request.Request (self._upload_url, data=body, headers=headers, method='POST')
        try:
            with urllib.request.urlopen(req) as f:
                response_headers = f.info()
                if self._verbose:
                    for k in response_headers:
                        print('%s: %s' % (k,response_headers[k]))
                    print(f.read().decode('utf-8'))
                crash_url = response_headers.get('Crash-URL')
                crash_id = response_headers.get('CrashId')
                linked_tickets = response_headers.get('Linked-Tickets')
                tickets = {}
                if linked_tickets:
                    for elem in linked_tickets.split(';'):
                        (tkt_id, tkt_url) = elem.split(':', 1)
                        tickets[int(tkt_id[1:])] = tkt_url
                print('Crash URL: %s' % (crash_url if crash_url else 'N/A'))
                print('Crash Id: %s' % (crash_id if crash_id else 'N/A'))
                if tickets:
                    print('Linked tickets:')
                    for (k,v) in tickets.items():
                        print('  #%i: %s' % (k,v))

        except urllib.error.HTTPError as e:
            ResponseData = e.read().decode("utf8", 'ignore')
            print('HTTP error %i: %s: %s' % (e.code, e.reason, ResponseData), file=sys.stderr)
        except urllib.error.URLError as e:
            print('Invalid URL: %s' % e.reason, file=sys.stderr)

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='import all given crashes')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-f', '--force', dest='force', action='store_true', help='force processing of given files.')
        parser.add_argument('-u', '--url', dest='upload_url', help='Specify upload url')
        parser.add_argument('-s', '--server', dest='server', default='localhost', help='Specify upload server hostname')
        parser.add_argument('-p', '--port', dest='port', default=8000, help='Specify upload server port')
        parser.add_argument('files', metavar='FILE', type=str, nargs='+', help='crash dump files or directories')
        parser.add_argument('--ticket', dest='create_ticket', default='auto', help='Specify if to create a new ticket for each crash')

        args = parser.parse_args()
        self._verbose = args.verbose
        self._force = args.force
        self._create_ticket = args.create_ticket
        if self._create_ticket == 'auto' or self._create_ticket == 'no' or self._create_ticket == 'new':
            pass
        elif '#' in self._create_ticket:
            ticket_ids = []
            for t in self._create_ticket.split(','):
                if t[0] == '#':
                    ticket_ids.append(int(t[1:]))
            self._create_ticket = ''
            for tkt_id in ticket_ids:
                if self._create_ticket:
                    self._create_ticket += ','
                self._create_ticket += '#%i' % tkt_id
        else:
            print('Invalid ticket option %s.' % self._create_ticket, file=sys.stderr)
            return 1

        if args.upload_url:
            self._upload_url = args.upload_url
        else:
            self._upload_url = 'http://%s:%i/trac-test/submit' % (args.server, args.port)

        if self._upload_url is None:
            print('No upload URL specified.', file=sys.stderr)
            ret = 2
        else:
            for f in args.files:
                if os.path.isdir(f):
                    for e in os.listdir(path=f):
                        full = os.path.join(f, e)
                        self._add_file(full)
                elif os.path.isfile(f):
                    self._add_file(f)

            for f in self._files:
                #print('%s' % f)
                self._process_file(f, force=args.force)

            ret = 0
        return ret

if __name__ == "__main__":
    app =  import_crashes_app()
    sys.exit(app.main())
